package org.exist.xquery.modules.wiki;

import org.exist.memtree.MemTreeBuilder;
import org.wikimodel.wem.*;
import org.wikimodel.wem.impl.IWikiScannerContext;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.AttributesImpl;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;

/**
 * 
 */
public class XHTMLListener implements IWemListener {

    private final static String XHTML_NS = "http://www.w3.org/1999/xhtml";

    private final static String WIKI_NS = "http://exist-db.org/xquery/wiki";

    private final static char[] NEWLINE = new char[] { '\n' };
    
    private final static Attributes EMPTY_ATTRIBS = new AttributesImpl();

    public final static String PARAM_CONTEXT_PATH = "context-path";
    
    private MemTreeBuilder builder;
    private Map parameters;

    public XHTMLListener(MemTreeBuilder builder, Map params) {
        this.builder = builder;
        this.parameters = params;
    }

    public void beginDefinitionDescription() {
        builder.startElement(XHTML_NS, "dd", "dd", EMPTY_ATTRIBS);
    }

    public void beginDefinitionList(WikiParameters wikiParameters) {
        builder.startElement(XHTML_NS, "dl", "dl", getParameters(wikiParameters));
    }

    public void beginDefinitionTerm() {
        builder.startElement(XHTML_NS, "dt", "dt", EMPTY_ATTRIBS);
    }

    public void beginDocument() {
        builder.startElement(XHTML_NS, "div", "div", EMPTY_ATTRIBS);
    }

    public void beginFormat(WikiFormat wikiFormat) {
        if (wikiFormat.hasStyle(IWikiScannerContext.STRONG)) {
            AttributesImpl attribs = new AttributesImpl();
            attribs.addAttribute("", "class", "class", "CDATA", "strong");
            builder.startElement(XHTML_NS, "span", "span", attribs);
        } else {
            String tag = null;
            if (wikiFormat.hasStyle(IWikiScannerContext.EM))
                tag = "em";
            if (wikiFormat.hasStyle(IWikiScannerContext.CODE))
                tag = "code";
            if (wikiFormat.hasStyle(IWikiScannerContext.SUB))
                tag = "sub";
            if (wikiFormat.hasStyle(IWikiScannerContext.SUP))
                tag = "sup";
            if (tag != null)
                builder.startElement(XHTML_NS, tag, tag, EMPTY_ATTRIBS);
        }
    }

    public void beginHeader(int i, WikiParameters wikiParameters) {
        String tag = "h" + i;
        builder.startElement(XHTML_NS, tag, tag, getParameters(wikiParameters));
    }

    public void beginInfoBlock(char c, WikiParameters wikiParameters) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void beginList(WikiParameters wikiParameters, boolean ordered) {
        String tag = ordered ? "ol" : "ul";
        Attributes attribs = getParameters(wikiParameters);
        builder.startElement(XHTML_NS, tag, tag, attribs);
    }

    public void beginListItem() {
        builder.startElement(XHTML_NS, "li", "li", EMPTY_ATTRIBS);
    }

    public void beginParagraph(WikiParameters wikiParameters) {
        Attributes attribs = getParameters(wikiParameters);
        builder.startElement(XHTML_NS, "p", "p", attribs);
    }

    private Attributes getParameters(WikiParameters wikiParameters) {
        Attributes attribs = EMPTY_ATTRIBS;
        if (wikiParameters.getSize() > 0) {
            AttributesImpl attrs = new AttributesImpl();
            for (int i = 0; i < wikiParameters.getSize(); i++) {
                WikiParameter param = wikiParameters.getParameter(i);
                attrs.addAttribute(XHTML_NS, param.getKey(), param.getKey(), "CDATA", param.getValue());
            }
            attribs = attrs;
        }
        return attribs;
    }

    public void beginPropertyBlock(String s, boolean b) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void beginPropertyInline(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void beginQuotation(WikiParameters wikiParameters) {
        builder.startElement(XHTML_NS, "blockquote", "blockquote", getParameters(wikiParameters));
    }

    public void beginQuotationLine() {
    }

    public void beginTable(WikiParameters wikiParameters) {
        builder.startElement(XHTML_NS, "table", "table", getParameters(wikiParameters));
    }

    public void beginTableCell(boolean tableHead, WikiParameters wikiParameters) {
        String tag = tableHead ? "th" : "td";
        builder.startElement(XHTML_NS, tag, tag, getParameters(wikiParameters));
    }

    public void beginTableRow(WikiParameters wikiParameters) {
        builder.startElement(XHTML_NS, "tr", "tr", getParameters(wikiParameters));
    }

    public void endDefinitionDescription() {
        builder.endElement();
    }

    public void endDefinitionList(WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endDefinitionTerm() {
        builder.endElement();
    }

    public void endDocument() {
        builder.endElement();
    }

    public void endFormat(WikiFormat wikiFormat) {
        if (wikiFormat.hasStyle(IWikiScannerContext.EM) || wikiFormat.hasStyle(IWikiScannerContext.STRONG) ||
                wikiFormat.hasStyle(IWikiScannerContext.CODE) || wikiFormat.hasStyle(IWikiScannerContext.SUB) ||
                wikiFormat.hasStyle(IWikiScannerContext.SUP))
            builder.endElement();
    }

    public void endHeader(int i, WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endInfoBlock(char c, WikiParameters wikiParameters) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void endList(WikiParameters wikiParameters, boolean b) {
        builder.endElement();
    }

    public void endListItem() {
        builder.endElement();
    }

    public void endParagraph(WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endPropertyBlock(String s, boolean b) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void endPropertyInline(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void endQuotation(WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endQuotationLine() {
    }

    public void endTable(WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endTableCell(boolean b, WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void endTableRow(WikiParameters wikiParameters) {
        builder.endElement();
    }

    public void onEscape(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void onExtensionBlock(String name, WikiParameters wikiParameters) {
        onExtensionInline(name, wikiParameters);
    }

    public void onExtensionInline(String name, WikiParameters wikiParameters) {
		StringBuilder action = new StringBuilder();
		action.append("ext:").append(name);
		if (wikiParameters.getSize() > 0) {
			action.append('?');
			for (int i = 0; i < wikiParameters.getSize(); i++) {
				if (i > 0)
					action.append("&amp;");
				WikiParameter param = wikiParameters.getParameter(i);
				action.append(WikiPageUtil.escapeXmlAttribute(param.getKey()));
				action.append(WikiPageUtil.escapeXmlAttribute(param.getValue()));
			}
		}

        AttributesImpl attribs = new AttributesImpl();
		
        attribs.addAttribute("", "class", "class", "CDATA", action);

        builder.startElement(XHTML_NS, "div", "div", attribs);
        builder.endElement();
    }

    public void onHorizontalLine() {
        builder.startElement(XHTML_NS, "hr", "hr", EMPTY_ATTRIBS);
        builder.endElement();
    }

    public void onLineBreak() {
        builder.startElement(XHTML_NS, "br", "br", EMPTY_ATTRIBS);
        builder.endElement();
    }

    public void onMacroBlock(String name, WikiParameters wikiParameters, String content) {
        AttributesImpl attribs = new AttributesImpl();
        attribs.addAttribute("", "name", "name", "CDATA", WikiPageUtil.escapeXmlAttribute(name));

        builder.startElement(WIKI_NS, "macro", "wiki:macro", attribs);
		if (wikiParameters.getSize() > 0) {
			builder.startElement(WIKI_NS, "params", "wiki:params", EMPTY_ATTRIBS);

			for (int i = 0; i < wikiParameters.getSize(); i++) {
				WikiParameter param = wikiParameters.getParameter(i);
				attribs = new AttributesImpl();
				attribs.addAttribute("", "name", "name", "CDATA", WikiPageUtil.escapeXmlAttribute(param.getKey()));
				attribs.addAttribute("", "value", "value", "CDATA", WikiPageUtil.escapeXmlAttribute(param.getValue()));
				builder.startElement(WIKI_NS, "param", "wiki:param", attribs);
				builder.endElement();
			}

			builder.endElement();
		}
        builder.characters(content);
        builder.endElement();
    }

    public void onMacroInline(String name, WikiParameters wikiParameters, String content) {
        AttributesImpl attribs = new AttributesImpl();
        attribs.addAttribute("", "name", "name", "CDATA", WikiPageUtil.escapeXmlAttribute(name));

        builder.startElement(WIKI_NS, "macro", "wiki:macro-inline", attribs);
		if (wikiParameters.getSize() > 0) {
			builder.startElement(WIKI_NS, "params", "wiki:params", EMPTY_ATTRIBS);

			for (int i = 0; i < wikiParameters.getSize(); i++) {
				WikiParameter param = wikiParameters.getParameter(i);
				attribs = new AttributesImpl();
				attribs.addAttribute("", "name", "name", "CDATA", WikiPageUtil.escapeXmlAttribute(param.getKey()));
				attribs.addAttribute("", "value", "value", "CDATA", WikiPageUtil.escapeXmlAttribute(param.getValue()));
				builder.startElement(WIKI_NS, "param", "wiki:param", attribs);
				builder.endElement();
			}

			builder.endElement();
		}
        builder.characters(content);
        builder.endElement();
    }

    public void onEmptyLines(int i) {
    }

    public void onNewLine() {
        builder.characters(NEWLINE, 0, NEWLINE.length);
    }

    public void onReference(String href, boolean explicitLink) {
        String link = WikiPageUtil.escapeXmlAttribute(href);
        AttributesImpl attribs = new AttributesImpl();
        attribs.addAttribute("", "href", "href", "CDATA", link);
        builder.startElement(XHTML_NS, "a", "a", attribs);
        builder.characters(WikiPageUtil.escapeXmlString(href));
        builder.endElement();
    }

    public void onSpace(String s) {
        builder.characters(s);
    }

    public void onSpecialSymbol(String s) {
        builder.characters(WikiPageUtil.escapeXmlString(s));
    }

    public void onTableCaption(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void onVerbatimBlock(String s) {
        builder.startElement(XHTML_NS, "pre", "pre", EMPTY_ATTRIBS);
        builder.cdataSection(s);
        builder.endElement();
    }

    public void onVerbatimInline(String s) {
        builder.startElement(XHTML_NS, "code", "code", EMPTY_ATTRIBS);
        builder.cdataSection(s);
        builder.endElement();
    }

    public void onWord(String s) {
        builder.characters(s);
    }
}
